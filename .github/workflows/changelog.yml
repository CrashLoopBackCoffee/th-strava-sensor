name: Generate Changelog

on:
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate changelog'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-changelog:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: bump_type
        run: |
          BUMP_TYPE=$(./scripts/determine-bump-type.sh)
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined bump type: $BUMP_TYPE"

      - name: Generate changelog and bump version
        id: changelog
        uses: orhun/git-cliff-action@v4
        with:
          config: cliff.toml
          args: --bump ${{ steps.bump_type.outputs.bump_type }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          OUTPUT: CHANGELOG.md

      - name: Update pyproject.toml version
        run: |
          # Update pyproject.toml with the new version from git-cliff
          RAW_VERSION="${{ steps.changelog.outputs.version }}"
          # Remove any 'v' prefix for pyproject.toml (Python packages should not have 'v' prefix)
          NEW_VERSION="${RAW_VERSION#v}"
          sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml
          echo "Updated version to $NEW_VERSION (from $RAW_VERSION)"

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          BRANCH_NAME="release/next"
          PR_TITLE="chore: prepare release ${{ steps.changelog.outputs.version }}"
          PR_BODY="## Release Preparation

          This PR prepares for release \`${{ steps.changelog.outputs.version }}\` by:

          - 📝 Updating CHANGELOG.md with all merged PRs since last release
          - 🔢 Bumping version to \`${{ steps.changelog.outputs.version }}\` (automatically determined by git-cliff)

          Once this PR is merged, a new GitHub release will be automatically created.

          ---
          🤖 This PR was automatically created by the changelog workflow."

          # Create or checkout branch (git checkout -B creates or resets to new branch)
          git checkout -B "$BRANCH_NAME"

          # Add and commit changes
          git add .
          git commit -m "chore: prepare release ${{ steps.changelog.outputs.version }}

          - Update CHANGELOG.md with latest changes
          - Bump version to ${{ steps.changelog.outputs.version }}"

          # Push branch (force-with-lease is safe for both new and existing)
          git push origin "$BRANCH_NAME" --force-with-lease

          # Check if open PR exists and create or update accordingly
          if gh pr view "$BRANCH_NAME" --json state --jq '.state' 2>/dev/null | grep -q "OPEN"; then
            echo "Updating existing open PR"
            gh pr edit "$BRANCH_NAME" --title "$PR_TITLE" --body "$PR_BODY"
          else
            echo "Creating new PR (no open PR found)"
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --label "release,automated" \
              --base main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
